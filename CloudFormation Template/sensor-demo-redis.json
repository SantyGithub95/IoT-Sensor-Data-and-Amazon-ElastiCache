{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template for handling sensor data with Amazon ElastiCache for Redis. **WARNING** This template creates an Amazon EC2 Instance and an Amazon ElastiCache Cluster. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "ClusterNodeType" : {
      "Description" : "The compute and memory capacity of the nodes in the Redis Cluster",
      "Type" : "String",
      "Default" : "cache.t2.small",
      "AllowedValues" : [ "cache.t2.small", "cache.m1.small", "cache.m1.large" ],
      "ConstraintDescription" : "must select a valid Cache Node type."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instance",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {

    "RegionMap" : {
      "us-east-1"        : {"AMI" : "ami-6869aa05"},
      "us-west-2"        : {"AMI" : "ami-7172b611"},
      "us-west-1"        : {"AMI" : "ami-31490d51"},
      "eu-west-1"        : {"AMI" : "ami-f9dd458a"},
      "eu-central-1"     : {"AMI" : "ami-ea26ce85"},
      "ap-northeast-1"   : {"AMI" : "ami-374db956"},
      "ap-northeast-2"   : {"AMI" : "ami-2b408b45"},
      "ap-southeast-1"   : {"AMI" : "ami-a59b49c6"},
      "ap-southeast-2"   : {"AMI" : "ami-dc361ebf"},
      "sa-east-1"        : {"AMI" : "ami-6dd04501"}
    }
  },

  "Resources" : {

    "RedisCluster" : {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType"           : { "Ref" : "ClusterNodeType" },
        "CacheSecurityGroupNames" : [ { "Ref" : "RedisClusterSecurityGroup" } ],
        "Engine"                  : "redis",
        "NumCacheNodes"           : "1"
      }
    },

    "RedisClusterSecurityGroup": {
      "Type": "AWS::ElastiCache::SecurityGroup",
      "Properties": {
        "Description"  : "elasticache security group"
      }
    },

    "RedisClusterSecurityGroupIngress": {
      "Type": "AWS::ElastiCache::SecurityGroupIngress",
      "Properties": {
        "CacheSecurityGroupName"  : { "Ref" : "RedisClusterSecurityGroup" },
        "EC2SecurityGroupName"    : { "Ref" : "EC2InstanceSecurityGroup" }
      }
    },

    "EC2InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"} }
        ]
      }
    },

    "EC2Instance": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets": {
            "default": [ "enablerepos", "configuration" ]
          },
          "enablerepos": {
            "commands": {
              "001": { "command": "yum-config-manager --enable epel" }
            }
          },
          "configuration": {
            "packages" : {
               "yum" : {
                 "gcc"       : [],
                 "nodejs"    : [],
                 "make"      : []
               }
             },
             "sources" : {
                "/home/ec2-user" : "https://s3-us-west-2.amazonaws.com/elasticache-labs/Sensor-Emulator/sensor-emulator.zip"
             },
              "files" : {
                "/usr/local/bin/redis-stable.sh" : {
                 "content" : { "Fn::Join" : ["", [
                   "#!/bin/bash\n",
                   "wget http://download.redis.io/redis-stable.tar.gz\n",
                   "tar xvzf redis-stable.tar.gz\n",
                   "cd redis-stable\n",
                   "make && make install\n"
                 ]]},
                 "mode"    : "000755",
                 "owner"   : "root",
                 "group"   : "root"
               },
               "/etc/cfn/cfn-hup.conf" : {
                 "content" : { "Fn::Join" : ["", [
                   "[main]\n",
                   "stack=", { "Ref" : "AWS::StackId" }, "\n",
                   "region=", { "Ref" : "AWS::Region" }, "\n"
                 ]]},
                 "mode"    : "000400",
                 "owner"   : "root",
                 "group"   : "root"
               },

               "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                 "content": { "Fn::Join" : ["", [
                   "[cfn-auto-reloader-hook]\n",
                   "triggers=post.update\n",
                   "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                   "action=/opt/aws/bin/cfn-init -v ",
                   "         --stack ", { "Ref" : "AWS::StackName" },
                   "         --resource EC2InstanceInstance ",
                   "         --region ", { "Ref" : "AWS::Region" }, "\n",
                   "runas=root\n"
                 ]]}
               }
             },

             "commands" : {
               "01-install-redis-cli" : {
                 "command" : "/usr/local/bin/redis-stable.sh"
               },
               "02-adjust-user-perms" : {
                 "command" : "cd /home/ec2-user && chown -R ec2-user:ec2-user . && chmod -R +rwX utils node_modules temp-sensor.js"
               }
             },

             "services" : {
               "sysvinit" : {
                 "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                               "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
               }
              }
            }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "EC2InstanceSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",
          "# Setup the system\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource EC2Instance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "# Signal the status of cfn-init\n",
          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource EC2Instance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs" : {
    "EC2InstanceHostname" : {
      "Description" : "Application URL",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ]}
    }
  }
}
